// Code generated by MockGen. DO NOT EDIT.
// Source: ./proxyApi.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	storage "homework-1/pkg/api/storage/v1"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockStorageServiceClient is a mock of StorageServiceClient interface.
type MockStorageServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockStorageServiceClientMockRecorder
}

// MockStorageServiceClientMockRecorder is the mock recorder for MockStorageServiceClient.
type MockStorageServiceClientMockRecorder struct {
	mock *MockStorageServiceClient
}

// NewMockStorageServiceClient creates a new mock instance.
func NewMockStorageServiceClient(ctrl *gomock.Controller) *MockStorageServiceClient {
	mock := &MockStorageServiceClient{ctrl: ctrl}
	mock.recorder = &MockStorageServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageServiceClient) EXPECT() *MockStorageServiceClientMockRecorder {
	return m.recorder
}

// ProductCreate mocks base method.
func (m *MockStorageServiceClient) ProductCreate(ctx context.Context, in *storage.ProductCreateRequest, opts ...grpc.CallOption) (*storage.ProductCreateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProductCreate", varargs...)
	ret0, _ := ret[0].(*storage.ProductCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductCreate indicates an expected call of ProductCreate.
func (mr *MockStorageServiceClientMockRecorder) ProductCreate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductCreate", reflect.TypeOf((*MockStorageServiceClient)(nil).ProductCreate), varargs...)
}

// ProductDelete mocks base method.
func (m *MockStorageServiceClient) ProductDelete(ctx context.Context, in *storage.ProductDeleteRequest, opts ...grpc.CallOption) (*storage.ProductDeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProductDelete", varargs...)
	ret0, _ := ret[0].(*storage.ProductDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductDelete indicates an expected call of ProductDelete.
func (mr *MockStorageServiceClientMockRecorder) ProductDelete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductDelete", reflect.TypeOf((*MockStorageServiceClient)(nil).ProductDelete), varargs...)
}

// ProductGet mocks base method.
func (m *MockStorageServiceClient) ProductGet(ctx context.Context, in *storage.ProductGetRequest, opts ...grpc.CallOption) (*storage.ProductGetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProductGet", varargs...)
	ret0, _ := ret[0].(*storage.ProductGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductGet indicates an expected call of ProductGet.
func (mr *MockStorageServiceClientMockRecorder) ProductGet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductGet", reflect.TypeOf((*MockStorageServiceClient)(nil).ProductGet), varargs...)
}

// ProductList mocks base method.
func (m *MockStorageServiceClient) ProductList(ctx context.Context, in *storage.ProductListRequest, opts ...grpc.CallOption) (storage.StorageService_ProductListClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProductList", varargs...)
	ret0, _ := ret[0].(storage.StorageService_ProductListClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductList indicates an expected call of ProductList.
func (mr *MockStorageServiceClientMockRecorder) ProductList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductList", reflect.TypeOf((*MockStorageServiceClient)(nil).ProductList), varargs...)
}

// ProductUpdate mocks base method.
func (m *MockStorageServiceClient) ProductUpdate(ctx context.Context, in *storage.ProductUpdateRequest, opts ...grpc.CallOption) (*storage.ProductUpdateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProductUpdate", varargs...)
	ret0, _ := ret[0].(*storage.ProductUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProductUpdate indicates an expected call of ProductUpdate.
func (mr *MockStorageServiceClientMockRecorder) ProductUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProductUpdate", reflect.TypeOf((*MockStorageServiceClient)(nil).ProductUpdate), varargs...)
}
